// This is basic/dbul/cmdline/dbul_embed_files_to_vxl_source_utils.cxx

//:
// \file
// \brief
// \author Firat Kalaycilar (firat@lems.brown.edu)
// \date Feb 09, 2010

#include<vcl_cstdlib.h>
#include<vcl_cstdio.h>
#include<vcl_iostream.h>
#include<vcl_sstream.h>
#include<vcl_fstream.h>
#include<vul/vul_file.h>

#include <dbul/dbul_random.h>

#include "dbul_embed_files_to_vxl_source_utils.h"

vcl_string getRandomVariableName(int len)
{
    return vcl_string("var_") + dbul_get_random_alphanumeric_string(len - 4);
}

vcl_string getRandomHFileTag(int len)
{
    return vcl_string("H_") + dbul_get_random_alphanumeric_string(len - 4) + vcl_string("_H");
}

void parseInputFile(vcl_string& input_file_name, vcl_vector<vcl_string>& original_files, vcl_vector<vcl_string>& variable_names, vcl_string& root_path)
{
    vcl_ifstream fs(input_file_name.c_str());
    vcl_string line;
    vcl_stringstream ss(vcl_stringstream::in | vcl_stringstream::out);
    int number_of_entries = 0;
    int count = -2;
    if (fs.is_open())
    {
        do
        {
            getline (fs,line);
            if (count == -2)
            {
                ss << line;
                ss >> number_of_entries;
            }
            else if (count == -1)
            {
                root_path = line;
            }
            else
            {
                original_files.push_back(line);
                variable_names.push_back(getRandomVariableName(32));
            }
            count++;
        }
        while(number_of_entries > count);
    }
    fs.close();
}

int getArrayString(vcl_string filename, vcl_string& varname, vcl_string& array_string)
{
    vcl_FILE* pFile = fopen(filename.c_str(),"rb");
    array_string = "char " + varname + "[] = {";
    if (pFile)
    {
        vcl_fseek(pFile , 0 , SEEK_END);
        int lSize = vcl_ftell(pFile);
        vcl_rewind(pFile);

        // allocate memory to contain the whole file:
        char* buffer = (char*) vcl_malloc (sizeof(char)*lSize);
        if (buffer == NULL) {vcl_fputs ("Memory error",stderr); vcl_exit (2);}

        // copy the file into the buffer:
        int result = fread (buffer,1,lSize,pFile);
        if (result != lSize) {vcl_fputs ("Reading error",stderr); vcl_exit (3);}


        for(int i = 0; i < lSize; i++)
        {
            char temp[50];
            vcl_sprintf(temp, "%d", int(buffer[i]));
            array_string += vcl_string(temp);
            if (i != lSize-1)
                array_string += ",";
        }
        array_string += "};\n";
        // terminate
        vcl_fclose (pFile);
        vcl_free(buffer);
        return lSize;
    }
    else
        return -1;

}

void create_h_file(vcl_string& filename, vcl_string& h_file_tag, vcl_string& extract_command, vcl_string& delete_command)
{
    vcl_ofstream outs(filename.c_str());
    outs << "// GENERATED BY DBUL\n\n#ifndef " << h_file_tag << vcl_endl << "#define " << h_file_tag << vcl_endl << vcl_endl;

    outs << "void " << extract_command << "(const char* dest_dir);" << vcl_endl;
    outs << "void " << delete_command << "(const char* dest_dir);" << vcl_endl;

    outs << vcl_endl << "#endif\n";
    outs.close();
}

void create_cpp_file(vcl_string& output_cpp_file_name, vcl_string& output_h_file_name, vcl_string& root_path, vcl_vector<vcl_string>& original_files, vcl_vector<vcl_string>& variable_names, vcl_vector<int>& data_sizes, vcl_string& extract_command, vcl_string& delete_command)
{
    vcl_ofstream outs(output_cpp_file_name.c_str());
    outs << "// GENERATED BY DBUL\n\n#include \""<< vul_file::strip_directory(output_h_file_name) << "\"" << vcl_endl;
    outs << "#include<dbul/dbul_handle_files_embedded_in_vxl_source.h>" << vcl_endl;
    outs << "#include<vcl_string.h>" << vcl_endl;
    outs << "#include<vul/vul_file.h>" << vcl_endl;
    outs << "#include<vcl_ctime.h>" << vcl_endl << vcl_endl;

    for(int i = 0; i < original_files.size(); i++)
    {
        vcl_string array_string;
        data_sizes.push_back(getArrayString(root_path + vcl_string("/") + original_files[i], variable_names[i], array_string));
        if(data_sizes.back() != -1)
        {
            outs << array_string << vcl_endl;
        }
        else
        {
            vcl_fputs ("File not found",stderr); outs.close(); vcl_exit (4);
        }
    }
    outs << "void " << extract_command << "(const char* dest_dir)" << vcl_endl;
    outs << "{" << vcl_endl;
    outs << "   vcl_string expanded_path = vul_file::expand_tilde(dest_dir);" << vcl_endl;
    outs << "   if(!dbul_is_file_extraction_in_progress(dest_dir))" << vcl_endl;
    outs << "   {" << vcl_endl;
    outs << "       if(!vul_file_exists(expanded_path))" << vcl_endl;
    outs << "       {" << vcl_endl;
    outs << "           vul_file::make_directory_path(expanded_path.c_str());" << vcl_endl;
    outs << "           dbul_create_file_extraction_lock(dest_dir);" << vcl_endl;
    for(int i = 0; i < original_files.size(); i++)
    {
    outs << "           dbul_default_extract_embedded_file(" << variable_names[i] << ", " << data_sizes[i] << ", dest_dir, \"" << original_files[i] << "\");" << vcl_endl;
    }
    outs << "           dbul_remove_file_extraction_lock(dest_dir);" << vcl_endl;
    outs << "       }" << vcl_endl;
    outs << "   }" << vcl_endl;
    outs << "   else while(dbul_is_file_extraction_in_progress(dest_dir))" << vcl_endl;
    outs << "   {" << vcl_endl;
    outs << "       vcl_clock_t endwait;" << vcl_endl;
    outs << "       endwait = vcl_clock () + 0.02 * CLOCKS_PER_SEC;" << vcl_endl;
    outs << "       while (vcl_clock() < endwait);" << vcl_endl;
    outs << "   }" << vcl_endl;
    outs << "}" << vcl_endl << vcl_endl;

    outs << "void " << delete_command << "(const char* dest_dir)" << vcl_endl;
    outs << "{" << vcl_endl;
    outs << "       dbul_default_delete_extracted_file(dest_dir);" << vcl_endl;
    outs << "}" << vcl_endl;

    outs.close();
}
